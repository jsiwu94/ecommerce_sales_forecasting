fcst_actual_df <- fcst_actual_df %>% mutate(lost_sales = ifelse(yhat-sales_volume < 0,0,abs(yhat-sales_volume)),
lost_revenue = ifelse(yhat-sales_volume < 0,0,abs(yhat-sales_volume))*revenue)
tail(fcst_actual_df)
fcst_actual_df <- inner_join(tsdf80,fcst, by=c("order_purchase_timestamp"="ds","product_category_name_english"), copy=FALSE)
fcst_actual_df <- fcst_actual_df %>% mutate(lost_sales = ifelse(yhat-sales_volume < 0,0,abs(yhat-sales_volume)),
lost_revenue = ifelse(yhat-sales_volume < 0,0,abs(yhat-sales_volume))*revenue)
dim(fcst_actual_df)
sum(tsdf[tsdf$product_category_name_english %in% top80sales$product_category_name_english,]$revenue)
#sum(tsdf[tsdf$product_category_name_english %in% top80sales$product_category_name_english,]$revenue)
tsdf
sum(tsdf[tsdf$product_category_name_english %in% top80sales$product_category_name_english,]$revenue*
tsdf[tsdf$product_category_name_english %in% top80sales$product_category_name_english,]$sales_volume)/
nrow(tsdf)*365
tsdf[tsdf$product_category_name_english %in% top80sales$product_category_name_english,] %>% select(revenue,sales_volume)
tsdf[tsdf$product_category_name_english %in% top80sales$product_category_name_english,] %>%
mutate(total_revenue = revenue*sales_volume)
tsdf[tsdf$product_category_name_english %in% top80sales$product_category_name_english,] %>%
mutate(total_revenue = revenue*sales_volume) %>% sum(total_revenue)
tsdftemp <- tsdf[tsdf$product_category_name_english %in% top80sales$product_category_name_english,] %>%
mutate(total_revenue = revenue*sales_volume)
sum(tsdftemp$total_revenue)
tsdftemp <- tsdf[tsdf$product_category_name_english %in% top80sales$product_category_name_english,] %>%
mutate(total_revenue = revenue*sales_volume)
sum(tsdftemp$total_revenue)/nrow(tsdftemp)*365
fcst_actual_df <- inner_join(tsdf80,fcst, by=c("order_purchase_timestamp"="ds","product_category_name_english"), copy=FALSE)
fcst_actual_df <- fcst_actual_df %>% mutate(lost_sales = ifelse(yhat-sales_volume < 0,0,abs(yhat-sales_volume)),
lost_revenue = ifelse(yhat-sales_volume < 0,0,abs(yhat-sales_volume))*revenue)
fcst_actual_df$revenue/nrow(fcst_actual_df)*365 #the average annual lost revenue saved
fcst_actual_df <- inner_join(tsdf80,fcst, by=c("order_purchase_timestamp"="ds","product_category_name_english"), copy=FALSE)
fcst_actual_df <- fcst_actual_df %>% mutate(lost_sales = ifelse(yhat-sales_volume < 0,0,abs(yhat-sales_volume)),
lost_revenue = ifelse(yhat-sales_volume < 0,0,abs(yhat-sales_volume))*revenue)
sum(fcst_actual_df$revenue)/nrow(fcst_actual_df)*365 #the average annual lost revenue saved
fcst_actual_df <- inner_join(tsdf80,fcst, by=c("order_purchase_timestamp"="ds","product_category_name_english"), copy=FALSE)
fcst_actual_df <- fcst_actual_df %>% mutate(lost_sales = ifelse(yhat-sales_volume < 0,0,abs(yhat-sales_volume)),
lost_revenue = ifelse(yhat-sales_volume < 0,0,abs(yhat-sales_volume))*revenue)
sum(fcst_actual_df$revenue) #the average annual lost revenue saved
fcst_actual_df <- inner_join(tsdf80,fcst, by=c("order_purchase_timestamp"="ds","product_category_name_english"), copy=FALSE)
fcst_actual_df <- fcst_actual_df %>% mutate(lost_sales = ifelse(yhat-sales_volume < 0,0,abs(yhat-sales_volume)),
lost_revenue = ifelse(yhat-sales_volume < 0,0,abs(yhat-sales_volume))*revenue)
sum(fcst_actual_df$lost_revenue)/nrow(fcst_actual_df)*365 #the average annual lost revenue saved
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
library(forecast)
library(tidyverse)
library(fable)
library(tsibble)
library(fabletools)
library(feasts)
library(prophet)
library(ggplot2)
library(ggfortify)
library(aTSA)
ord_df <- read.csv("~/Desktop/MSBA/Winter 2020/Bus Data Mgmt/brazilian-ecommerce/olist_orders_dataset.csv", header=TRUE)
oi_df <- read.csv("~/Desktop/MSBA/Winter 2020/Bus Data Mgmt/brazilian-ecommerce/olist_order_items_dataset.csv", header=TRUE)
itm_df <- read.csv("~/Desktop/MSBA/Winter 2020/Bus Data Mgmt/brazilian-ecommerce/olist_products_dataset.csv", header=TRUE)
itm_eng_df <- read.csv("~/Desktop/MSBA/Winter 2020/Bus Data Mgmt/brazilian-ecommerce/product_category_name_translation.csv", header=TRUE)
#str(ord_df)
#str(oi_df)
#str(itm_df)
head(ord_df)
head(oi_df)
head(itm_df)
head(itm_eng_df)
product_complete <- left_join(itm_df, itm_eng_df, by = "product_category_name", copy = FALSE)
items_df <-
product_complete  %>% dplyr::select(product_id,
product_category_name,
product_category_name_english) %>%
mutate(product_category_name_english =ifelse(is.null(product_category_name_english)
& product_category_name == "pc_gamer","pc_gamer",
ifelse(is.null(product_category_name_english)
& product_category_name != "pc_gamer","portable_mixer",
product_category_name_english)
)) %>%
dplyr::select(product_id,product_category_name_english)
head(items_df)
order <- dplyr::select(ord_df, c(order_id,order_purchase_timestamp)) %>%
mutate(order_purchase_timestamp=as.Date(order_purchase_timestamp))
order <- order[order$order_purchase_timestamp >= as.Date('2017-01-01') & order$order_purchase_timestamp < as.Date('2018-08-01'),]
orderitem <- oi_df %>%
dplyr::select(order_id,order_item_id,product_id,price) %>%
mutate(total_price = order_item_id*price,
qty  = order_item_id) %>% dplyr::select(-order_item_id)
master_df <- inner_join(inner_join(order,orderitem, by = "order_id", copy = FALSE),items_df, by = "product_id", copy = FALSE)
head(master_df)
tsdf <- master_df %>%
group_by(order_purchase_timestamp,product_category_name_english) %>%
summarise(sales_volume = sum(qty),
revenue = sum(total_price))
top_sales <- tsdf %>% group_by(product_category_name_english) %>%
summarise(sales_volume = sum(sales_volume)) %>%  arrange(desc(sales_volume)) %>%
mutate(cummulative_sales = cumsum(sales_volume)/sum(tsdf$sales_volume))
top_rev <- tsdf %>% group_by(product_category_name_english) %>%
summarise(revenue = sum(revenue)) %>%  arrange(desc(revenue)) %>%
mutate(cummulative_revenue = cumsum(revenue)/sum(tsdf$revenue))
top80sales <- top_sales[top_sales$cummulative_sales <= .8,] %>% arrange(cummulative_sales)
top80revenue <- top_rev[top_rev$cummulative_revenue <= .8,]
ggplot(top80sales, aes(x=reorder(product_category_name_english,-cummulative_sales))) +
geom_bar(aes(y=sales_volume), fill='#06d997', stat="identity") +
theme(axis.text.x = element_text(angle=90, vjust=0.6)) +
labs(title = "Top 80% Cummulative Sales", subtitle = "Sales Volume by Product Category"
, x = 'Product Category', y ='Sales (in Units)') + coord_flip()
ggplot(top80revenue, aes(x=reorder(product_category_name_english,-cummulative_revenue))) +
geom_bar(aes(y=revenue/10000), fill='#213ee2', stat="identity") +
theme(axis.text.x = element_text(angle=90, vjust=0.6)) +
labs(title = "Top 80% Cummulative Revenue", subtitle = "Revenue by Product Category",
x = 'Product Category', y ='Revenue (in 10K)')+  coord_flip()
tsdf2 <- master_df  %>% filter(product_category_name_english %in% top80sales$product_category_name_english) %>%
group_by(order_purchase_timestamp) %>%
summarise(sales_volume = sum(qty))
#ts(tsdf2$sales_volume, start = c(2016, 9, 4)) %>% autoplot()
p <- ggplot(tsdf2, aes(x=order_purchase_timestamp, y=sales_volume)) +
geom_line(color = "#213ee2") +
ggtitle("Top 80% Sales Volume (2017 to 2018)") +
theme(plot.title = element_text(size = 22, face = "bold"))
p
tsdf2 <- master_df  %>% filter(product_category_name_english %in% top80sales$product_category_name_english) %>%
group_by(order_purchase_timestamp) %>%
summarise(sales_volume = sum(qty))
#ts(tsdf2$sales_volume, start = c(2016, 9, 4)) %>% autoplot()
p <- ggplot(tsdf2, aes(x=order_purchase_timestamp, y=sales_volume)) +
geom_line(color = "#213ee2") +
ggtitle("Top 80% Sales Volume (2017 to 2018)") +
theme(plot.title = element_text(size = 22, face = "bold"))
p
dc1_classical_add <- decompose(ts(tsdf2$sales_volume, frequency = 7), type = "additive")
autoplot(dc1_classical_add) +
ggtitle("Top 80% Sales Volume Classical Additive Decomposition") +
xlab("order_purchase_timestamp")
tsdftemp <- tsdf[tsdf$product_category_name_english %in% top80sales$product_category_name_english,] %>%
mutate(total_revenue = revenue*sales_volume)
sum(tsdftemp$total_revenue)/nrow(tsdftemp)*365
tsdf2 <- select(tsdf,-revenue)[tsdf$product_category_name_english %in% c("bed_bath_table","furniture_decor"
,"health_beauty"),]
p <- ggplot(tsdf2[tsdf2$order_purchase_timestamp>= as.Date("2017-10-01"),], aes(x=order_purchase_timestamp, y=sales_volume, color = product_category_name_english)) +
geom_line() +
ggtitle("Sales Volume from Oct 2017 to Sep 2018") +
scale_x_date(date_labels = "%m-%Y") +
scale_color_manual(values=c("#213ee2", "#06d997","#a49cf8")) +
theme(plot.title = element_text(size = 22, face = "bold"))
p
tsdf80 <- tsdf[tsdf$product_category_name_english %in% top80sales$product_category_name_english,]
tsdf80f <- tsdf80 %>% mutate(dow = wday(order_purchase_timestamp, label=TRUE),
month = month(order_purchase_timestamp, label=TRUE),
day = day(order_purchase_timestamp))
monthtemp <- tsdf80f %>% group_by(month) %>% summarise(sales_volume= sum(sales_volume))
temp <- tsdf80f %>% group_by(dow) %>% summarise(sales_volume= sum(sales_volume))
temp$dow <- ordered(temp$dow, levels=c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
daytemp <- tsdf80f %>% group_by(day) %>% summarise(sales_volume= sum(sales_volume))
ggplot(monthtemp, aes(x=month, y=sales_volume, group = 1)) +
geom_line(color = "#213ee2",size=1.5) +
geom_point(color = "#06d997",size=5)+
ggtitle("Yearly Trend") +
theme(plot.title = element_text(size = 22, face = "bold"))
ggplot(daytemp, aes(x=day, y=sales_volume, group = 1)) +
geom_line(color = "#043e83",size=1) +
geom_point(color = "#a49cf8",size=4)+
ggtitle("Monthly Trend") +
theme(plot.title = element_text(size = 22, face = "bold"))
ggplot(temp, aes(x=dow, y=sales_volume,fill=dow)) +
geom_bar(position="dodge", stat="identity") +
ggtitle("Weekly Trend") +
scale_fill_manual(values=c("#213ee2","#a49cf8","#5071dd","#88b0e4","#06d997","#046a41","#043e83")) +
theme(plot.title = element_text(size = 22, face = "bold"))
#PACF & ACF showing so many lags correlated with the last values -->  Need to make data stationary
tsreg <- tsdf80f %>% group_by(order_purchase_timestamp) %>% summarise(sales_volume=sum(sales_volume))
tsregts <-  ts(tsreg$sales_volume, frequency = 7)
autoplot(tsregts, ts.colour = "#213ee2")
Acf(tsregts, lag=60)
Pacf(tsregts, lag=60)
#using diff to make data stationary --> already looking much better
tsdiff <- tsdf80f %>% group_by(order_purchase_timestamp) %>% summarise(sales_volume=sum(sales_volume))
tsdiffts <-  ts(tsdiff$sales_volume, frequency = 7)
diff1 <- diff(tsdiffts, differences = 7)
autoplot(diff1, ts.colour = "#213ee2")
Acf(diff1, lag=60)
Pacf(diff1, lag=60)
adf.test(diff1, nlag = 1)
tempdf <- tsdf80f %>% group_by(order_purchase_timestamp,day,month,dow) %>% summarise(sales_volume=sum(sales_volume))
#adding the holiday calendar information
hldy <- read.csv("~/Documents/ecommerce_sales_forecasting/holidaycalendarbrazil.csv", header=TRUE) %>% mutate(date = as.Date(as.character(Date), format = "%m/%d/%y"))
month <- as.character(tempdf$month)
dow <- as.character(tempdf$dow)
monthdum <- as.data.frame(model.matrix(~month-1))[,2:12]
dowdum <-as.data.frame(model.matrix(~dow-1))[,2:7]
tempdf <- tempdf %>% mutate(weekday =  ifelse(as.character( wday(order_purchase_timestamp, label=TRUE)) %in% c("Sun","Sat"), 0,1))
tempdf1 <- cbind(tempdf,monthdum,dowdum)
#merging the holiday information to the ts dataframe
merged_df <- left_join(tempdf1, hldy, by = c("order_purchase_timestamp"="date"), copy = FALSE)
merged_df['holiday']<- ifelse(is.na(merged_df$Date),0,1)
merged_df <- merged_df %>% select(-Date)
merged_df$product_category <- "all"
alltsb <- as_tsibble(merged_df, index = order_purchase_timestamp, key = product_category)
train <- merged_df %>% filter(order_purchase_timestamp < '2018-05-01')
test <- merged_df %>% filter(order_purchase_timestamp >= '2018-05-01')
traintsb <- as_tsibble(train, index = order_purchase_timestamp, key = product_category)
testtsb <- as_tsibble(test, index = order_purchase_timestamp, key = product_category)
traints <- ts(train$sales_volume, frequency = 7)
testts <- ts(test$sales_volume, frequency = 7)
ar_man <- arima(traints, order=c(4,1,2), seasonal= list(order=c(0,1,2), period=7))
ar_au <- auto.arima(traints)
print("Tuned Arima")
summary(ar_man)
Box.test(residuals(ar_man))
print("Auto Arima")
summary(ar_au)
Box.test(residuals(ar_au))
checkresiduals((ar_man))
#TSLM
fit.tslm <- traintsb %>%
model(TSLM(sales_volume ~ month + trend() + season(period="week") + fourier(period = "month",3)))
fit.tslm %>% report()
fc.reg <- fit.tslm %>% predict(testtsb)
fc.reg %>% accuracy(testtsb)
fc.reg %>%
autoplot(alltsb, level =NULL) +
ggtitle("Forecasts vs Actual for Top 80 Sales Products - TSLM") +
xlab("Year") +
guides(colour = guide_legend(title = "Forecast"))
fit.arlm <- traintsb %>%
model(tuned_lm_arima = ARIMA(sales_volume ~ month + weekday + holiday + day + trend() + fourier(period = "week",1)
+ fourier(period = "month",3) + fourier(period = "year",5)))
fit.arlm %>% report()
fc.arlm <- fit.arlm %>% predict(testtsb)
fc.arlm %>% accuracy(testtsb)
fc.arlm %>%
autoplot(alltsb, level =NULL) +
ggtitle("Forecasts vs Actual for Top 80 Sales Products - TSLM") +
xlab("Year") +
guides(colour = guide_legend(title = "Forecast"))
fit <- traintsb %>%
model(tuned_arima = ARIMA(sales_volume ~ 0 + pdq(4, 1, 2) + PDQ(0, 1, 1, period = 7)),
tuned_lm_arima =  ARIMA(sales_volume ~ month + weekday + holiday + day + trend() + fourier(period = "week",1)+
fourier(period = "month",3) + fourier(period = "year",5)),
ets = ETS(sales_volume, opt_crit = "mse"),
tslm = TSLM(sales_volume ~ month + trend() + season("week") + fourier(period = "month",3)))
fit %>% report()
#forecasting
val_days <- nrow(testtsb)
fc <- fit %>% predict(testtsb)
fc %>% accuracy(testtsb)
fc %>%
autoplot(alltsb, level =NULL) +
ggtitle("Forecasts vs Actual for Top 80 Sales Products") +
xlab("Year") +
guides(colour = guide_legend(title = "Forecast"))
fit_ensemble <- traintsb %>% model(ensemble = (ARIMA(sales_volume ~ month + weekday + holiday + day + trend() +
fourier(period = "week",1)+fourier(period = "month",3) +
fourier(period = "year",5)) +
ETS(sales_volume))/2)
fc_ensemble <- fit_ensemble %>% predict(testtsb)
fcst_ensemble <- fit_ensemble %>% predict(alltsb)
fc_ensemble %>% accuracy(testtsb)
fc_ensemble %>%
autoplot(alltsb, level =NULL) +
ggtitle("Ensemble Forecasts vs Actual for Top 80 Sales Products") +
xlab("Year") +
guides(colour = guide_legend(title = "Forecast"))
library(rsconnect)
# Import libraries
library(lubridate)
library(shiny)
library(plotly)
library(tidyverse)
library(shinythemes)
setwd("~/Documents/ecommerce_sales_forecasting/app/")
# Read in the prediction output data and actuals
#model <- readRDS("model_nested_df.rds")
act <- read.csv("actfc_df.csv", header = TRUE) %>% select(c(order_purchase_timestamp,product_category_name_english,sales_volume))
fcst <- read.csv("prediction_output_fbprophet.csv", header = TRUE)
product_category <- c("all",unique(act$product_category_name_english)) #creating a list for the product category dropdown
combined_df <- right_join(act,fcst, by =c("order_purchase_timestamp"="ds","product_category_name_english") , copy=FALSE) %>%
mutate(date = order_purchase_timestamp,
product_category=product_category_name_english,
actual = sales_volume,
forecast = yhat) %>% select(c(date,product_category,actual,forecast))
alltemp <- data.frame(combined_df %>% group_by(date) %>% summarise(actual = sum(actual),
forecast = sum(forecast)))
alldf <- data.frame(date=alltemp$date,product_category="all",alltemp[,2:3])
combined_df <- rbind(combined_df,alldf)
combined_df <- combined_df %>% mutate(forecast = round(ifelse(forecast<0,0,forecast),0))
####################################
# User interface                   #
####################################
ui <- fluidPage(theme = shinytheme("flatly"),
# Page header
headerPanel('Ecommerce Forecast vs Actual Dashboard'),
# Input values
sidebarPanel(
#HTML("<h3>Input parameters</h3>"),
tags$label(h3('Input parameters')),
selectInput("product_category",
label = "Product Category",
product_category, selected = "all"),
sliderInput("date", label = "Start Date", min = as.Date("2017-01-05"), max = as.Date("2018-08-30"), value = as.Date("2017-01-05")),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
plotlyOutput('plot1'),
tableOutput("tabledata") # Prediction results table
)
)
#runApp("app-v2.R")
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
### Rendering the outputs
Output <- combined_df[combined_df$date >= input$date & combined_df$product_category== input$product_category,]
print(tail(Output,30))
})
pltinput <- reactive({
outputplotdf <- combined_df[combined_df$date >= input$date & combined_df$product_category== input$product_category,] %>%
gather(key="type", value="value",-c(date,product_category)) %>%
mutate(date = as.Date(date))
})
#prediction plot
output$plot1 <- renderPlotly({
pal <- c("#213ee2", "#06d997")
fig <- plot_ly(pltinput(), x = ~date, y = ~value, type = 'scatter', mode = 'lines', color = ~type, colors=pal) %>%
layout(
title = list(text = paste("Product Category =","'",input$product_category,"'"), y = 0.97, x=0.5),
titlefont = list(
size = 28,
color = '#213ee2'),
xaxis = list(type = 'date',
tickformat = "%B %Y"))
fig
})
# Prediction table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
# Import libraries
#library(lubridate)
library(shiny)
library(plotly)
library(tidyverse)
library(shinythemes)
setwd("~/Documents/ecommerce_sales_forecasting/app/")
# Read in the prediction output data and actuals
#model <- readRDS("model_nested_df.rds")
act <- read.csv("actfc_df.csv", header = TRUE) %>% select(c(order_purchase_timestamp,product_category_name_english,sales_volume))
fcst <- read.csv("prediction_output_fbprophet.csv", header = TRUE)
product_category <- c("all",unique(act$product_category_name_english)) #creating a list for the product category dropdown
combined_df <- right_join(act,fcst, by =c("order_purchase_timestamp"="ds","product_category_name_english") , copy=FALSE) %>%
mutate(date = order_purchase_timestamp,
product_category=product_category_name_english,
actual = sales_volume,
forecast = yhat) %>% select(c(date,product_category,actual,forecast))
alltemp <- data.frame(combined_df %>% group_by(date) %>% summarise(actual = sum(actual),
forecast = sum(forecast)))
alldf <- data.frame(date=alltemp$date,product_category="all",alltemp[,2:3])
combined_df <- rbind(combined_df,alldf)
combined_df <- combined_df %>% mutate(forecast = round(ifelse(forecast<0,0,forecast),0))
####################################
# User interface                   #
####################################
ui <- fluidPage(theme = shinytheme("flatly"),
# Page header
headerPanel('Ecommerce Forecast vs Actual Dashboard'),
# Input values
sidebarPanel(
#HTML("<h3>Input parameters</h3>"),
tags$label(h3('Input parameters')),
selectInput("product_category",
label = "Product Category",
product_category, selected = "all"),
sliderInput("date", label = "Start Date", min = as.Date("2017-01-05"), max = as.Date("2018-08-30"), value = as.Date("2017-01-05")),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
plotlyOutput('plot1'),
tableOutput("tabledata") # Prediction results table
)
)
#runApp("app-v2.R")
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
### Rendering the outputs
Output <- combined_df[combined_df$date >= input$date & combined_df$product_category== input$product_category,]
print(tail(Output,30))
})
pltinput <- reactive({
outputplotdf <- combined_df[combined_df$date >= input$date & combined_df$product_category== input$product_category,] %>%
gather(key="type", value="value",-c(date,product_category)) %>%
mutate(date = as.Date(date))
})
#prediction plot
output$plot1 <- renderPlotly({
pal <- c("#213ee2", "#06d997")
fig <- plot_ly(pltinput(), x = ~date, y = ~value, type = 'scatter', mode = 'lines', color = ~type, colors=pal) %>%
layout(
title = list(text = paste("Product Category =","'",input$product_category,"'"), y = 0.97, x=0.5),
titlefont = list(
size = 28,
color = '#213ee2'),
xaxis = list(type = 'date',
tickformat = "%B %Y"))
fig
})
# Prediction table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
tidyverse_conflicts()
# Import libraries
library(lubridate)
library(shiny)
library(plotly)
library(tidyverse)
library(shinythemes)
setwd("~/Documents/ecommerce_sales_forecasting/app/")
# Read in the prediction output data and actuals
#model <- readRDS("model_nested_df.rds")
act <- read.csv("actfc_df.csv", header = TRUE) %>% select(c(order_purchase_timestamp,product_category_name_english,sales_volume))
fcst <- read.csv("prediction_output_fbprophet.csv", header = TRUE)
product_category <- c("all",unique(act$product_category_name_english)) #creating a list for the product category dropdown
combined_df <- right_join(act,fcst, by =c("order_purchase_timestamp"="ds","product_category_name_english") , copy=FALSE) %>%
mutate(date = order_purchase_timestamp,
product_category=product_category_name_english,
actual = sales_volume,
forecast = yhat) %>% select(c(date,product_category,actual,forecast))
alltemp <- data.frame(combined_df %>% group_by(date) %>% summarise(actual = sum(actual),
forecast = sum(forecast)))
alldf <- data.frame(date=alltemp$date,product_category="all",alltemp[,2:3])
combined_df <- rbind(combined_df,alldf)
combined_df <- combined_df %>% mutate(forecast = round(ifelse(forecast<0,0,forecast),0))
####################################
# User interface                   #
####################################
ui <- fluidPage(theme = shinytheme("flatly"),
# Page header
headerPanel('Ecommerce Forecast vs Actual Dashboard'),
# Input values
sidebarPanel(
#HTML("<h3>Input parameters</h3>"),
tags$label(h3('Input parameters')),
selectInput("product_category",
label = "Product Category",
product_category, selected = "all"),
sliderInput("date", label = "Start Date", min = as.Date("2017-01-05"), max = as.Date("2018-08-30"), value = as.Date("2017-01-05")),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
plotlyOutput('plot1'),
tableOutput("tabledata") # Prediction results table
)
)
#runApp("app-v2.R")
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
### Rendering the outputs
Output <- combined_df[combined_df$date >= input$date & combined_df$product_category== input$product_category,]
print(tail(Output,30))
})
pltinput <- reactive({
outputplotdf <- combined_df[combined_df$date >= input$date & combined_df$product_category== input$product_category,] %>%
gather(key="type", value="value",-c(date,product_category)) %>%
mutate(date = as.Date(date))
})
#prediction plot
output$plot1 <- renderPlotly({
pal <- c("#213ee2", "#06d997")
fig <- plot_ly(pltinput(), x = ~date, y = ~value, type = 'scatter', mode = 'lines', color = ~type, colors=pal) %>%
layout(
title = list(text = paste("Product Category =","'",input$product_category,"'"), y = 0.97, x=0.5),
titlefont = list(
size = 28,
color = '#213ee2'),
xaxis = list(type = 'date',
tickformat = "%B %Y"))
fig
})
# Prediction table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
