# https://www.instagram.com/data.professor #
############################################
# Import libraries
library(shiny)
library(data.table)
library(randomForest)
# Read in the RF model
model <- readRDS("model.rds")
# Training set
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Iris Predictor'),
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h4>"),
sliderInput("Sepal.Length", label = "Sepal Length", value = 5.0,
min = min(TrainSet$Sepal.Length),
max = max(TrainSet$Sepal.Length)
),
sliderInput("Sepal.Width", label = "Sepal Width", value = 3.6,
min = min(TrainSet$Sepal.Width),
max = max(TrainSet$Sepal.Width)),
sliderInput("Petal.Length", label = "Petal Length", value = 1.4,
min = min(TrainSet$Petal.Length),
max = max(TrainSet$Petal.Length)),
sliderInput("Petal.Width", label = "Petal Width", value = 0.2,
min = min(TrainSet$Petal.Width),
max = max(TrainSet$Petal.Width)),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
fcst_actual_df
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
df <- data.frame(
Name = c("Sepal Length",
"Sepal Width",
"Petal Length",
"Petal Width"),
Value = as.character(c(input$Sepal.Length,
input$Sepal.Width,
input$Petal.Length,
input$Petal.Width)),
stringsAsFactors = FALSE)
Species <- 0
df <- rbind(df, Species)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
############################################
# Data Professor                           #
# http://youtube.com/dataprofessor         #
# http://github.com/dataprofessor          #
# http://facebook.com/dataprofessor        #
# https://www.instagram.com/data.professor #
############################################
# Import libraries
library(shiny)
library(data.table)
library(randomForest)
# Read in the RF model
model <- readRDS("model.rds")
# Training set
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Iris Predictor'),
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h4>"),
sliderInput("Sepal.Length", label = "Sepal Length", value = 5.0,
min = min(TrainSet$Sepal.Length),
max = max(TrainSet$Sepal.Length)
),
sliderInput("Sepal.Width", label = "Sepal Width", value = 3.6,
min = min(TrainSet$Sepal.Width),
max = max(TrainSet$Sepal.Width)),
sliderInput("Petal.Length", label = "Petal Length", value = 1.4,
min = min(TrainSet$Petal.Length),
max = max(TrainSet$Petal.Length)),
sliderInput("Petal.Width", label = "Petal Width", value = 0.2,
min = min(TrainSet$Petal.Width),
max = max(TrainSet$Petal.Width)),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
fcst_actual_df
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
df <- data.frame(
Name = c("Sepal Length",
"Sepal Width",
"Petal Length",
"Petal Width"),
Value = as.character(c(input$Sepal.Length,
input$Sepal.Width,
input$Petal.Length,
input$Petal.Width)),
stringsAsFactors = FALSE)
Species <- 0
df <- rbind(df, Species)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
# Import libraries
library(lubridate)
library(shiny)
library(plotly)
library(tidyverse)
library(tsibble)
library(ggthemes)
setwd("~/Documents/ecommerce_sales_forecasting/")
# Read in the prediction output data and actuals
#model <- readRDS("model_nested_df.rds")
act <- read.csv("actfc_df.csv", header = TRUE) %>% select(c(order_purchase_timestamp,product_category_name_english,sales_volume))
fcst <- read.csv("prediction_output_fbprophet.csv", header = TRUE)
product_category <- c("all",unique(act$product_category_name_english)) #creating a list for the product category dropdown
combined_df <- right_join(act,fcst, by =c("order_purchase_timestamp"="ds","product_category_name_english") , copy=FALSE) %>%
mutate(date = order_purchase_timestamp,
product_category=product_category_name_english,
actual = sales_volume,
forecast = yhat) %>% select(c(date,product_category,actual,forecast))
alltemp <- data.frame(combined_df %>% group_by(date) %>% summarise(actual = sum(actual),
forecast = sum(forecast)))
alldf <- data.frame(date=alltemp$date,product_category="all",alltemp[,2:3])
combined_df <- rbind(combined_df,alldf)
combined_df <- combined_df %>% mutate(forecast = round(ifelse(forecast<0,0,forecast),0))
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Ecommerce Forecast vs Actual Dashboard'),
# Input values
sidebarPanel(
#HTML("<h3>Input parameters</h3>"),
tags$label(h3('Input parameters')),
selectInput("product_category",
label = "Product Category",
product_category, selected = "all"),
sliderInput("date", label = "Start Date", min = as.Date("2017-01-05"), max = as.Date("2018-08-30"), value = as.Date("2017-01-05")),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Forecast vs Actual Result')), # Status/Output Text Box
plotOutput("plot1"),
tableOutput("tabledata") # Prediction results table
)
)
#runApp("app-v2.R")
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
### Rendering the outputs
#Output <- combined_df[combined_df$date >= input$date & combined_df$product_category== input$product_category,]
Output <- combined_df[combined_df$date >= as.Date("2017-02-01") & combined_df$product_category== "auto",]
print(tail(Output,30))
#plotting
outputplotdf <- Output %>% gather(key="type", value="value",-c(date,product_category)) %>%
mutate(date = as.Date(date))
output$plot1 <- renderPlot({
pal <- c("#213ee2", "#06d997")
fig <- plot_ly(outputplotdf, x = ~date, y = ~value, type = 'scatter', mode = 'lines', color = ~type, colors=pal) %>%
layout(
title = paste("Forecast vs Actual Sales Volume for",input$product_category),
titlefont = list(
size = 22,
color = '#213ee2'),
xaxis = list(type = 'date',
tickformat = "%B %Y")
)
return(fig)
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
})
}
####################################
shinyApp(ui = ui, server = server)
# Import libraries
library(lubridate)
library(shiny)
library(plotly)
library(tidyverse)
library(tsibble)
library(ggthemes)
setwd("~/Documents/ecommerce_sales_forecasting/")
# Read in the prediction output data and actuals
#model <- readRDS("model_nested_df.rds")
act <- read.csv("actfc_df.csv", header = TRUE) %>% select(c(order_purchase_timestamp,product_category_name_english,sales_volume))
fcst <- read.csv("prediction_output_fbprophet.csv", header = TRUE)
product_category <- c("all",unique(act$product_category_name_english)) #creating a list for the product category dropdown
combined_df <- right_join(act,fcst, by =c("order_purchase_timestamp"="ds","product_category_name_english") , copy=FALSE) %>%
mutate(date = order_purchase_timestamp,
product_category=product_category_name_english,
actual = sales_volume,
forecast = yhat) %>% select(c(date,product_category,actual,forecast))
alltemp <- data.frame(combined_df %>% group_by(date) %>% summarise(actual = sum(actual),
forecast = sum(forecast)))
alldf <- data.frame(date=alltemp$date,product_category="all",alltemp[,2:3])
combined_df <- rbind(combined_df,alldf)
combined_df <- combined_df %>% mutate(forecast = round(ifelse(forecast<0,0,forecast),0))
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Ecommerce Forecast vs Actual Dashboard'),
# Input values
sidebarPanel(
#HTML("<h3>Input parameters</h3>"),
tags$label(h3('Input parameters')),
selectInput("product_category",
label = "Product Category",
product_category, selected = "all"),
sliderInput("date", label = "Start Date", min = as.Date("2017-01-05"), max = as.Date("2018-08-30"), value = as.Date("2017-01-05")),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Forecast vs Actual Result')), # Status/Output Text Box
plotOutput("plot1"),
tableOutput("tabledata") # Prediction results table
)
)
#runApp("app-v2.R")
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
### Rendering the outputs
#Output <- combined_df[combined_df$date >= input$date & combined_df$product_category== input$product_category,]
Output <- combined_df[combined_df$date >= as.Date("2017-02-01") & combined_df$product_category== "auto",]
print(tail(Output,30))
#plotting
outputplotdf <- Output %>% gather(key="type", value="value",-c(date,product_category)) %>%
mutate(date = as.Date(date))
output$plot1 <- renderPlot({
pal <- c("#213ee2", "#06d997")
fig <- plot_ly(outputplotdf, x = ~date, y = ~value, type = 'scatter', mode = 'lines', color = ~type, colors=pal) %>%
layout(
title = paste("Forecast vs Actual Sales Volume for",input$product_category),
titlefont = list(
size = 22,
color = '#213ee2'),
xaxis = list(type = 'date',
tickformat = "%B %Y")
)
return(fig)
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
# Import libraries
library(lubridate)
library(shiny)
library(plotly)
library(tidyverse)
library(tsibble)
library(ggthemes)
setwd("~/Documents/ecommerce_sales_forecasting/")
# Read in the prediction output data and actuals
#model <- readRDS("model_nested_df.rds")
act <- read.csv("actfc_df.csv", header = TRUE) %>% select(c(order_purchase_timestamp,product_category_name_english,sales_volume))
fcst <- read.csv("prediction_output_fbprophet.csv", header = TRUE)
product_category <- c("all",unique(act$product_category_name_english)) #creating a list for the product category dropdown
combined_df <- right_join(act,fcst, by =c("order_purchase_timestamp"="ds","product_category_name_english") , copy=FALSE) %>%
mutate(date = order_purchase_timestamp,
product_category=product_category_name_english,
actual = sales_volume,
forecast = yhat) %>% select(c(date,product_category,actual,forecast))
alltemp <- data.frame(combined_df %>% group_by(date) %>% summarise(actual = sum(actual),
forecast = sum(forecast)))
alldf <- data.frame(date=alltemp$date,product_category="all",alltemp[,2:3])
combined_df <- rbind(combined_df,alldf)
combined_df <- combined_df %>% mutate(forecast = round(ifelse(forecast<0,0,forecast),0))
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Ecommerce Forecast vs Actual Dashboard'),
# Input values
sidebarPanel(
#HTML("<h3>Input parameters</h3>"),
tags$label(h3('Input parameters')),
selectInput("product_category",
label = "Product Category",
product_category, selected = "all"),
sliderInput("date", label = "Start Date", min = as.Date("2017-01-05"), max = as.Date("2018-08-30"), value = as.Date("2017-01-05")),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Forecast vs Actual Result')), # Status/Output Text Box
plotOutput("plot1"),
tableOutput("tabledata") # Prediction results table
)
)
#runApp("app-v2.R")
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
### Rendering the outputs
Output <- combined_df[combined_df$date >= input$date & combined_df$product_category== input$product_category,]
#Output <- combined_df[combined_df$date >= as.Date("2017-02-01") & combined_df$product_category== "auto",]
print(tail(Output,30))
#plotting
outputplotdf <- Output %>% gather(key="type", value="value",-c(date,product_category)) %>%
mutate(date = as.Date(date))
})
#prediction plot
output$plot1 <- renderPlot({
pal <- c("#213ee2", "#06d997")
fig <- plot_ly(outputplotdf, x = ~date, y = ~value, type = 'scatter', mode = 'lines', color = ~type, colors=pal) %>%
layout(
title = paste("Forecast vs Actual Sales Volume for",input$product_category),
titlefont = list(
size = 22,
color = '#213ee2'),
xaxis = list(type = 'date',
tickformat = "%B %Y"))
})
# Prediction table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
# Import libraries
library(lubridate)
library(shiny)
library(plotly)
library(tidyverse)
library(tsibble)
library(ggthemes)
setwd("~/Documents/ecommerce_sales_forecasting/")
# Read in the prediction output data and actuals
#model <- readRDS("model_nested_df.rds")
act <- read.csv("actfc_df.csv", header = TRUE) %>% select(c(order_purchase_timestamp,product_category_name_english,sales_volume))
fcst <- read.csv("prediction_output_fbprophet.csv", header = TRUE)
product_category <- c("all",unique(act$product_category_name_english)) #creating a list for the product category dropdown
combined_df <- right_join(act,fcst, by =c("order_purchase_timestamp"="ds","product_category_name_english") , copy=FALSE) %>%
mutate(date = order_purchase_timestamp,
product_category=product_category_name_english,
actual = sales_volume,
forecast = yhat) %>% select(c(date,product_category,actual,forecast))
alltemp <- data.frame(combined_df %>% group_by(date) %>% summarise(actual = sum(actual),
forecast = sum(forecast)))
alldf <- data.frame(date=alltemp$date,product_category="all",alltemp[,2:3])
combined_df <- rbind(combined_df,alldf)
combined_df <- combined_df %>% mutate(forecast = round(ifelse(forecast<0,0,forecast),0))
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Ecommerce Forecast vs Actual Dashboard'),
# Input values
sidebarPanel(
#HTML("<h3>Input parameters</h3>"),
tags$label(h3('Input parameters')),
selectInput("product_category",
label = "Product Category",
product_category, selected = "all"),
sliderInput("date", label = "Start Date", min = as.Date("2017-01-05"), max = as.Date("2018-08-30"), value = as.Date("2017-01-05")),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Forecast vs Actual Result')), # Status/Output Text Box
plotOutput("plot1"),
tableOutput("tabledata") # Prediction results table
)
)
#runApp("app-v2.R")
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
### Rendering the outputs
Output <- combined_df[combined_df$date >= input$date & combined_df$product_category== input$product_category,]
#Output <- combined_df[combined_df$date >= as.Date("2017-02-01") & combined_df$product_category== "auto",]
print(tail(Output,30))
#plotting
outputplotdf <- Output %>% gather(key="type", value="value",-c(date,product_category)) %>%
mutate(date = as.Date(date))
})
#prediction plot
output$plot1 <- renderPlot({
pal <- c("#213ee2", "#06d997")
fig <- plot_ly(outputplotdf, x = ~date, y = ~value, type = 'scatter', mode = 'lines', color = ~type, colors=pal) %>%
layout(
title = paste("Forecast vs Actual Sales Volume for",input$product_category),
titlefont = list(
size = 22,
color = '#213ee2'),
xaxis = list(type = 'date',
tickformat = "%B %Y"))
fig
})
# Prediction table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
